// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CoalParser.fsy"

open Ast

# 9 "CoalParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COLON
  | COMMA
  | DOT
  | SLASH
  | STAR
  | MINUS
  | PLUS
  | SEMICOLON
  | BANG_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | EQUAL_EQUAL
  | AND
  | OR
  | PLUS_PLUS
  | MINUS_MINUS
  | DOT_DOT
  | BANG
  | GREATER
  | LESS
  | EQUAL
  | NIL
  | STRING
  | INT
  | FLOAT
  | BOOL
  | LET
  | CLASS
  | SUPER
  | THIS
  | LPAREN
  | RPAREN
  | WHILE
  | FOR
  | UNTIL
  | IN
  | DO
  | END
  | IF
  | THEN
  | ELSE
  | UNLESS
  | EOF
  | STRING_LIT of (string)
  | BOOL_LIT of (bool)
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_SEMICOLON
    | TOKEN_BANG_EQUAL
    | TOKEN_GREATER_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_EQUAL_EQUAL
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS_PLUS
    | TOKEN_MINUS_MINUS
    | TOKEN_DOT_DOT
    | TOKEN_BANG
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_EQUAL
    | TOKEN_NIL
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_LET
    | TOKEN_CLASS
    | TOKEN_SUPER
    | TOKEN_THIS
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_UNTIL
    | TOKEN_IN
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNLESS
    | TOKEN_EOF
    | TOKEN_STRING_LIT
    | TOKEN_BOOL_LIT
    | TOKEN_FLOAT_LIT
    | TOKEN_INT_LIT
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Stmt
    | NONTERM_Expr
    | NONTERM_BoolExpr
    | NONTERM_ParamList
    | NONTERM_ExprList
    | NONTERM_Vardef
    | NONTERM_Formal
    | NONTERM_FuncDeclList
    | NONTERM_FormalDeclList
    | NONTERM_Funcdef
    | NONTERM_StmtList
    | NONTERM_NilStmt
    | NONTERM_Type
    | NONTERM_BoolOp
    | NONTERM_BinOp
    | NONTERM_UnOp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COLON  -> 0 
  | COMMA  -> 1 
  | DOT  -> 2 
  | SLASH  -> 3 
  | STAR  -> 4 
  | MINUS  -> 5 
  | PLUS  -> 6 
  | SEMICOLON  -> 7 
  | BANG_EQUAL  -> 8 
  | GREATER_EQUAL  -> 9 
  | LESS_EQUAL  -> 10 
  | EQUAL_EQUAL  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | PLUS_PLUS  -> 14 
  | MINUS_MINUS  -> 15 
  | DOT_DOT  -> 16 
  | BANG  -> 17 
  | GREATER  -> 18 
  | LESS  -> 19 
  | EQUAL  -> 20 
  | NIL  -> 21 
  | STRING  -> 22 
  | INT  -> 23 
  | FLOAT  -> 24 
  | BOOL  -> 25 
  | LET  -> 26 
  | CLASS  -> 27 
  | SUPER  -> 28 
  | THIS  -> 29 
  | LPAREN  -> 30 
  | RPAREN  -> 31 
  | WHILE  -> 32 
  | FOR  -> 33 
  | UNTIL  -> 34 
  | IN  -> 35 
  | DO  -> 36 
  | END  -> 37 
  | IF  -> 38 
  | THEN  -> 39 
  | ELSE  -> 40 
  | UNLESS  -> 41 
  | EOF  -> 42 
  | STRING_LIT _ -> 43 
  | BOOL_LIT _ -> 44 
  | FLOAT_LIT _ -> 45 
  | INT_LIT _ -> 46 
  | IDENTIFIER _ -> 47 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COLON 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_SLASH 
  | 4 -> TOKEN_STAR 
  | 5 -> TOKEN_MINUS 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_SEMICOLON 
  | 8 -> TOKEN_BANG_EQUAL 
  | 9 -> TOKEN_GREATER_EQUAL 
  | 10 -> TOKEN_LESS_EQUAL 
  | 11 -> TOKEN_EQUAL_EQUAL 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_PLUS_PLUS 
  | 15 -> TOKEN_MINUS_MINUS 
  | 16 -> TOKEN_DOT_DOT 
  | 17 -> TOKEN_BANG 
  | 18 -> TOKEN_GREATER 
  | 19 -> TOKEN_LESS 
  | 20 -> TOKEN_EQUAL 
  | 21 -> TOKEN_NIL 
  | 22 -> TOKEN_STRING 
  | 23 -> TOKEN_INT 
  | 24 -> TOKEN_FLOAT 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_LET 
  | 27 -> TOKEN_CLASS 
  | 28 -> TOKEN_SUPER 
  | 29 -> TOKEN_THIS 
  | 30 -> TOKEN_LPAREN 
  | 31 -> TOKEN_RPAREN 
  | 32 -> TOKEN_WHILE 
  | 33 -> TOKEN_FOR 
  | 34 -> TOKEN_UNTIL 
  | 35 -> TOKEN_IN 
  | 36 -> TOKEN_DO 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_IF 
  | 39 -> TOKEN_THEN 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_UNLESS 
  | 42 -> TOKEN_EOF 
  | 43 -> TOKEN_STRING_LIT 
  | 44 -> TOKEN_BOOL_LIT 
  | 45 -> TOKEN_FLOAT_LIT 
  | 46 -> TOKEN_INT_LIT 
  | 47 -> TOKEN_IDENTIFIER 
  | 50 -> TOKEN_end_of_input
  | 48 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Stmt 
    | 4 -> NONTERM_Stmt 
    | 5 -> NONTERM_Stmt 
    | 6 -> NONTERM_Stmt 
    | 7 -> NONTERM_Stmt 
    | 8 -> NONTERM_Stmt 
    | 9 -> NONTERM_Stmt 
    | 10 -> NONTERM_Stmt 
    | 11 -> NONTERM_Stmt 
    | 12 -> NONTERM_Stmt 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_BoolExpr 
    | 22 -> NONTERM_ParamList 
    | 23 -> NONTERM_ParamList 
    | 24 -> NONTERM_ExprList 
    | 25 -> NONTERM_ExprList 
    | 26 -> NONTERM_Vardef 
    | 27 -> NONTERM_Vardef 
    | 28 -> NONTERM_Vardef 
    | 29 -> NONTERM_Formal 
    | 30 -> NONTERM_FuncDeclList 
    | 31 -> NONTERM_FuncDeclList 
    | 32 -> NONTERM_FormalDeclList 
    | 33 -> NONTERM_FormalDeclList 
    | 34 -> NONTERM_Funcdef 
    | 35 -> NONTERM_StmtList 
    | 36 -> NONTERM_StmtList 
    | 37 -> NONTERM_NilStmt 
    | 38 -> NONTERM_Type 
    | 39 -> NONTERM_Type 
    | 40 -> NONTERM_Type 
    | 41 -> NONTERM_Type 
    | 42 -> NONTERM_Type 
    | 43 -> NONTERM_BoolOp 
    | 44 -> NONTERM_BoolOp 
    | 45 -> NONTERM_BoolOp 
    | 46 -> NONTERM_BoolOp 
    | 47 -> NONTERM_BoolOp 
    | 48 -> NONTERM_BoolOp 
    | 49 -> NONTERM_BoolOp 
    | 50 -> NONTERM_BoolOp 
    | 51 -> NONTERM_BinOp 
    | 52 -> NONTERM_BinOp 
    | 53 -> NONTERM_BinOp 
    | 54 -> NONTERM_BinOp 
    | 55 -> NONTERM_BinOp 
    | 56 -> NONTERM_UnOp 
    | 57 -> NONTERM_UnOp 
    | 58 -> NONTERM_UnOp 
    | 59 -> NONTERM_UnOp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 50 
let _fsyacc_tagOfErrorTerminal = 48

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | SEMICOLON  -> "SEMICOLON" 
  | BANG_EQUAL  -> "BANG_EQUAL" 
  | GREATER_EQUAL  -> "GREATER_EQUAL" 
  | LESS_EQUAL  -> "LESS_EQUAL" 
  | EQUAL_EQUAL  -> "EQUAL_EQUAL" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | PLUS_PLUS  -> "PLUS_PLUS" 
  | MINUS_MINUS  -> "MINUS_MINUS" 
  | DOT_DOT  -> "DOT_DOT" 
  | BANG  -> "BANG" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | EQUAL  -> "EQUAL" 
  | NIL  -> "NIL" 
  | STRING  -> "STRING" 
  | INT  -> "INT" 
  | FLOAT  -> "FLOAT" 
  | BOOL  -> "BOOL" 
  | LET  -> "LET" 
  | CLASS  -> "CLASS" 
  | SUPER  -> "SUPER" 
  | THIS  -> "THIS" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | UNTIL  -> "UNTIL" 
  | IN  -> "IN" 
  | DO  -> "DO" 
  | END  -> "END" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | UNLESS  -> "UNLESS" 
  | EOF  -> "EOF" 
  | STRING_LIT _ -> "STRING_LIT" 
  | BOOL_LIT _ -> "BOOL_LIT" 
  | FLOAT_LIT _ -> "FLOAT_LIT" 
  | INT_LIT _ -> "INT_LIT" 
  | IDENTIFIER _ -> "IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | BANG_EQUAL  -> (null : System.Object) 
  | GREATER_EQUAL  -> (null : System.Object) 
  | LESS_EQUAL  -> (null : System.Object) 
  | EQUAL_EQUAL  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | PLUS_PLUS  -> (null : System.Object) 
  | MINUS_MINUS  -> (null : System.Object) 
  | DOT_DOT  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | SUPER  -> (null : System.Object) 
  | THIS  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | UNTIL  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | UNLESS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 9us; 65535us; 3us; 97us; 15us; 16us; 31us; 97us; 34us; 97us; 39us; 40us; 41us; 42us; 46us; 47us; 80us; 97us; 95us; 97us; 23us; 65535us; 3us; 48us; 8us; 9us; 12us; 60us; 15us; 48us; 23us; 24us; 25us; 60us; 27us; 28us; 31us; 48us; 34us; 48us; 37us; 60us; 39us; 48us; 41us; 48us; 44us; 60us; 46us; 48us; 54us; 62us; 65us; 57us; 66us; 58us; 67us; 59us; 69us; 61us; 71us; 63us; 77us; 64us; 80us; 48us; 95us; 48us; 4us; 65535us; 12us; 13us; 25us; 26us; 37us; 38us; 44us; 45us; 1us; 65535us; 54us; 55us; 1us; 65535us; 54us; 70us; 9us; 65535us; 3us; 5us; 15us; 5us; 31us; 5us; 34us; 5us; 39us; 5us; 41us; 5us; 46us; 5us; 80us; 5us; 95us; 5us; 2us; 65535us; 88us; 89us; 90us; 87us; 1us; 65535us; 90us; 91us; 1us; 65535us; 90us; 86us; 9us; 65535us; 3us; 6us; 15us; 6us; 31us; 6us; 34us; 6us; 39us; 6us; 41us; 6us; 46us; 6us; 80us; 6us; 95us; 6us; 5us; 65535us; 0us; 3us; 30us; 31us; 33us; 34us; 79us; 80us; 94us; 95us; 1us; 65535us; 90us; 85us; 4us; 65535us; 21us; 22us; 74us; 75us; 83us; 84us; 92us; 93us; 12us; 65535us; 9us; 111us; 24us; 111us; 28us; 111us; 48us; 111us; 57us; 111us; 58us; 111us; 59us; 111us; 60us; 69us; 61us; 111us; 62us; 111us; 63us; 111us; 64us; 111us; 12us; 65535us; 9us; 65us; 24us; 65us; 28us; 65us; 48us; 65us; 57us; 65us; 58us; 65us; 59us; 65us; 60us; 65us; 61us; 65us; 62us; 65us; 63us; 65us; 64us; 65us; 23us; 65535us; 3us; 66us; 8us; 66us; 12us; 66us; 15us; 66us; 23us; 66us; 25us; 66us; 27us; 66us; 31us; 66us; 34us; 66us; 37us; 66us; 39us; 66us; 41us; 66us; 44us; 66us; 46us; 66us; 54us; 66us; 65us; 66us; 66us; 66us; 67us; 66us; 69us; 66us; 71us; 66us; 77us; 66us; 80us; 66us; 95us; 66us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 15us; 39us; 44us; 46us; 48us; 58us; 61us; 63us; 65us; 75us; 81us; 83us; 88us; 101us; 114us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 36us; 1us; 2us; 1us; 3us; 1us; 4us; 3us; 5us; 13us; 17us; 1us; 5us; 2us; 5us; 18us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 7us; 18us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 7us; 18us; 1us; 7us; 1us; 7us; 2us; 7us; 36us; 1us; 7us; 1us; 8us; 2us; 8us; 36us; 1us; 8us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 12us; 18us; 1us; 12us; 2us; 13us; 17us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 2us; 18us; 18us; 2us; 18us; 19us; 2us; 18us; 20us; 2us; 18us; 21us; 2us; 18us; 21us; 2us; 18us; 24us; 2us; 18us; 25us; 3us; 18us; 27us; 28us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 20us; 2us; 21us; 51us; 2us; 23us; 25us; 1us; 25us; 4us; 26us; 27us; 28us; 34us; 4us; 26us; 27us; 28us; 34us; 3us; 26us; 27us; 28us; 3us; 26us; 27us; 28us; 1us; 26us; 2us; 27us; 28us; 1us; 27us; 1us; 28us; 2us; 28us; 36us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 2us; 31us; 33us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 34us; 36us; 1us; 34us; 1us; 36us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 19us; 21us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 55us; 57us; 59us; 61us; 64us; 66us; 68us; 71us; 73us; 75us; 78us; 80us; 83us; 86us; 89us; 92us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 112us; 114us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 132us; 135us; 138us; 141us; 144us; 147us; 150us; 154us; 156us; 158us; 160us; 162us; 165us; 168us; 170us; 175us; 180us; 184us; 188us; 190us; 193us; 195us; 197us; 200us; 202us; 204us; 206us; 208us; 210us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; |]
let _fsyacc_action_rows = 120
let _fsyacc_actionTableElements = [|0us; 16419us; 0us; 49152us; 0us; 16385us; 16us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 38us; 36us; 41us; 43us; 42us; 4us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 2us; 16397us; 20us; 8us; 30us; 54us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 13us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 7us; 10us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 0us; 16389us; 1us; 32768us; 30us; 12us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 31us; 14us; 1us; 32768us; 36us; 15us; 15us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16390us; 1us; 32768us; 30us; 18us; 1us; 32768us; 26us; 19us; 1us; 32768us; 47us; 20us; 1us; 32768us; 0us; 21us; 5us; 32768us; 21us; 102us; 22us; 98us; 23us; 99us; 24us; 100us; 25us; 101us; 1us; 32768us; 20us; 23us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 13us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 7us; 25us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 7us; 27us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 13us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 31us; 29us; 1us; 32768us; 36us; 30us; 0us; 16419us; 16us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 37us; 32us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16391us; 0us; 16419us; 16us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 37us; 35us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16392us; 1us; 32768us; 30us; 37us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 31us; 39us; 15us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 1us; 16393us; 40us; 41us; 15us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16394us; 1us; 32768us; 30us; 44us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 31us; 46us; 15us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16395us; 13us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 7us; 49us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 0us; 16396us; 1us; 16397us; 30us; 54us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 9us; 16406us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 31us; 56us; 0us; 16401us; 12us; 16402us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 12us; 16403us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 13us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 31us; 68us; 12us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 12us; 16405us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 12us; 16408us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 12us; 16409us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 14us; 32768us; 3us; 113us; 4us; 112us; 5us; 115us; 6us; 114us; 7us; 78us; 8us; 103us; 9us; 104us; 10us; 105us; 11us; 106us; 12us; 107us; 13us; 108us; 18us; 110us; 19us; 109us; 35us; 79us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 0us; 16404us; 9us; 16435us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 16407us; 1us; 71us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 1us; 32768us; 47us; 73us; 2us; 32768us; 0us; 74us; 30us; 90us; 5us; 32768us; 21us; 102us; 22us; 98us; 23us; 99us; 24us; 100us; 25us; 101us; 2us; 32768us; 7us; 76us; 20us; 77us; 0us; 16410us; 9us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 30us; 67us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 50us; 0us; 16411us; 0us; 16419us; 16us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 37us; 81us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16412us; 1us; 32768us; 0us; 83us; 5us; 32768us; 21us; 102us; 22us; 98us; 23us; 99us; 24us; 100us; 25us; 101us; 0us; 16413us; 0us; 16414us; 1us; 16415us; 1us; 88us; 0us; 16416us; 1us; 32768us; 47us; 82us; 0us; 16417us; 1us; 16421us; 47us; 82us; 1us; 32768us; 31us; 92us; 5us; 32768us; 21us; 102us; 22us; 98us; 23us; 99us; 24us; 100us; 25us; 101us; 1us; 32768us; 36us; 94us; 0us; 16419us; 16us; 32768us; 5us; 117us; 14us; 118us; 15us; 119us; 17us; 116us; 26us; 72us; 30us; 67us; 32us; 11us; 33us; 17us; 36us; 33us; 37us; 96us; 38us; 36us; 41us; 43us; 43us; 53us; 45us; 52us; 46us; 51us; 47us; 7us; 0us; 16418us; 0us; 16420us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; 2us; 3us; 20us; 21us; 22us; 23us; 26us; 36us; 50us; 51us; 53us; 63us; 65us; 67us; 83us; 84us; 86us; 88us; 90us; 92us; 98us; 100us; 110us; 124us; 134us; 136us; 146us; 160us; 162us; 163us; 180us; 181us; 182us; 199us; 200us; 202us; 212us; 214us; 230us; 232us; 248us; 249us; 251us; 261us; 263us; 279us; 280us; 294us; 295us; 297us; 298us; 299us; 300us; 310us; 312us; 313us; 326us; 339us; 353us; 366us; 379us; 392us; 405us; 420us; 430us; 440us; 450us; 451us; 461us; 463us; 473us; 475us; 478us; 484us; 487us; 488us; 498us; 499us; 500us; 517us; 518us; 520us; 526us; 527us; 528us; 530us; 531us; 533us; 534us; 536us; 538us; 544us; 546us; 547us; 564us; 565us; 566us; 567us; 568us; 569us; 570us; 571us; 572us; 573us; 574us; 575us; 576us; 577us; 578us; 579us; 580us; 581us; 582us; 583us; 584us; 585us; 586us; 587us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 1us; 4us; 6us; 16us; 3us; 5us; 7us; 5us; 2us; 1us; 1us; 1us; 1us; 4us; 3us; 2us; 3us; 3us; 0us; 1us; 1us; 3us; 5us; 7us; 9us; 3us; 1us; 1us; 1us; 3us; 9us; 0us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 16398us; 16399us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 16414us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 16420us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 16443us; |]
let _fsyacc_reductions ()  =    [| 
# 423 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 432 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "CoalParser.fsy"
                                    _1 
                   )
# 21 "CoalParser.fsy"
                 : Ast.Prog));
# 443 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "CoalParser.fsy"
                                          Prog(List.rev(_1)) 
                   )
# 24 "CoalParser.fsy"
                 : 'Prog));
# 454 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "CoalParser.fsy"
                                    _1 
                   )
# 27 "CoalParser.fsy"
                 : 'Stmt));
# 465 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Funcdef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "CoalParser.fsy"
                                     _1 
                   )
# 28 "CoalParser.fsy"
                 : 'Stmt));
# 476 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "CoalParser.fsy"
                                                             Assign(_1,_3) 
                   )
# 29 "CoalParser.fsy"
                 : 'Stmt));
# 488 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "CoalParser.fsy"
                                                                  While(_3,_5) 
                   )
# 30 "CoalParser.fsy"
                 : 'Stmt));
# 500 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _15 = (let data = parseState.GetInput(15) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "CoalParser.fsy"
                                                                                                                                      Seq [Vardef(_4, _6, _8) ; While(_10, _15 @ [_12]] 
                   )
# 31 "CoalParser.fsy"
                 : 'Stmt));
# 516 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "CoalParser.fsy"
                                             Seq(List.rev(_2)) 
                   )
# 32 "CoalParser.fsy"
                 : 'Stmt));
# 527 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "CoalParser.fsy"
                                                            IfThenElse(_3,_5, NilStmt) 
                   )
# 33 "CoalParser.fsy"
                 : 'Stmt));
# 539 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "CoalParser.fsy"
                                                                      IfThenElse(_3,_5,_7) 
                   )
# 34 "CoalParser.fsy"
                 : 'Stmt));
# 552 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "CoalParser.fsy"
                                                                IfThenElse(_3, _5, NilStmt) 
                   )
# 35 "CoalParser.fsy"
                 : 'Stmt));
# 564 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "CoalParser.fsy"
                                            _1 
                   )
# 36 "CoalParser.fsy"
                 : 'Stmt));
# 575 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "CoalParser.fsy"
                                        Val(_1) 
                   )
# 38 "CoalParser.fsy"
                 : 'Expr));
# 586 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "CoalParser.fsy"
                                      Int(_1) 
                   )
# 39 "CoalParser.fsy"
                 : 'Expr));
# 597 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "CoalParser.fsy"
                                        Float(_1) 
                   )
# 40 "CoalParser.fsy"
                 : 'Expr));
# 608 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "CoalParser.fsy"
                                        String(_1) 
                   )
# 41 "CoalParser.fsy"
                 : 'Expr));
# 619 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "CoalParser.fsy"
                                                                FuncCall(_1, _3) 
                   )
# 42 "CoalParser.fsy"
                 : 'Expr));
# 631 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BinOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CoalParser.fsy"
                                             BinOp(_1, _2, _3) 
                   )
# 43 "CoalParser.fsy"
                 : 'Expr));
# 644 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UnOp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "CoalParser.fsy"
                                       UnOp(_1, _2) 
                   )
# 44 "CoalParser.fsy"
                 : 'Expr));
# 656 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CoalParser.fsy"
                                                _2 
                   )
# 45 "CoalParser.fsy"
                 : 'Expr));
# 667 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CoalParser.fsy"
                                                  BinOp(_1, _2, _3) 
                   )
# 47 "CoalParser.fsy"
                 : 'BoolExpr));
# 680 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CoalParser.fsy"
                                  [] 
                   )
# 49 "CoalParser.fsy"
                 : 'ParamList));
# 690 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CoalParser.fsy"
                                           _1 
                   )
# 50 "CoalParser.fsy"
                 : 'ParamList));
# 701 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CoalParser.fsy"
                                      [_1] 
                   )
# 52 "CoalParser.fsy"
                 : 'ExprList));
# 712 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CoalParser.fsy"
                                                     _3 :: _1 
                   )
# 53 "CoalParser.fsy"
                 : 'ExprList));
# 724 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CoalParser.fsy"
                                                                   Vardef(_2, _4, NilStmt) 
                   )
# 55 "CoalParser.fsy"
                 : 'Vardef));
# 736 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "CoalParser.fsy"
                                                                              Vardef(_2, _4, _6) 
                   )
# 56 "CoalParser.fsy"
                 : 'Vardef));
# 749 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CoalParser.fsy"
                                                                                    _8 @ [Vardef(_2, _4, _6)] 
                   )
# 57 "CoalParser.fsy"
                 : 'Vardef));
# 763 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CoalParser.fsy"
                                                     Formal (_1, _3) 
                   )
# 61 "CoalParser.fsy"
                 : 'Formal));
# 775 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'NilStmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CoalParser.fsy"
                                             [] 
                   )
# 63 "CoalParser.fsy"
                 : 'FuncDeclList));
# 786 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FormalDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CoalParser.fsy"
                                                _1 
                   )
# 64 "CoalParser.fsy"
                 : 'FuncDeclList));
# 797 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Formal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CoalParser.fsy"
                                              [_1] 
                   )
# 66 "CoalParser.fsy"
                 : 'FormalDeclList));
# 808 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FormalDeclList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Formal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CoalParser.fsy"
                                                                  _3 :: _1 
                   )
# 67 "CoalParser.fsy"
                 : 'FormalDeclList));
# 820 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'FuncDeclList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CoalParser.fsy"
                                                                                               Funcdef(_2, _4, _6, _8) 
                   )
# 69 "CoalParser.fsy"
                 : 'Funcdef));
# 834 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CoalParser.fsy"
                                 [] 
                   )
# 72 "CoalParser.fsy"
                 : 'StmtList));
# 844 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CoalParser.fsy"
                                               _2 :: _1  
                   )
# 73 "CoalParser.fsy"
                 : 'StmtList));
# 856 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CoalParser.fsy"
                               
                   )
# 75 "CoalParser.fsy"
                 : 'NilStmt));
# 866 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CoalParser.fsy"
                                   
                   )
# 77 "CoalParser.fsy"
                 : 'Type));
# 876 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CoalParser.fsy"
                                
                   )
# 78 "CoalParser.fsy"
                 : 'Type));
# 886 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CoalParser.fsy"
                                  
                   )
# 79 "CoalParser.fsy"
                 : 'Type));
# 896 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CoalParser.fsy"
                                 
                   )
# 80 "CoalParser.fsy"
                 : 'Type));
# 906 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CoalParser.fsy"
                                
                   )
# 81 "CoalParser.fsy"
                 : 'Type));
# 916 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CoalParser.fsy"
                                         
                   )
# 83 "CoalParser.fsy"
                 : 'BoolOp));
# 926 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CoalParser.fsy"
                                            
                   )
# 84 "CoalParser.fsy"
                 : 'BoolOp));
# 936 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CoalParser.fsy"
                                         
                   )
# 85 "CoalParser.fsy"
                 : 'BoolOp));
# 946 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CoalParser.fsy"
                                          
                   )
# 86 "CoalParser.fsy"
                 : 'BoolOp));
# 956 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CoalParser.fsy"
                                  
                   )
# 87 "CoalParser.fsy"
                 : 'BoolOp));
# 966 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CoalParser.fsy"
                                 
                   )
# 88 "CoalParser.fsy"
                 : 'BoolOp));
# 976 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CoalParser.fsy"
                                   
                   )
# 89 "CoalParser.fsy"
                 : 'BoolOp));
# 986 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CoalParser.fsy"
                                      
                   )
# 90 "CoalParser.fsy"
                 : 'BoolOp));
# 996 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolOp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CoalParser.fsy"
                                    
                   )
# 92 "CoalParser.fsy"
                 : 'BinOp));
# 1007 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CoalParser.fsy"
                                  
                   )
# 93 "CoalParser.fsy"
                 : 'BinOp));
# 1017 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CoalParser.fsy"
                                   
                   )
# 94 "CoalParser.fsy"
                 : 'BinOp));
# 1027 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CoalParser.fsy"
                                  
                   )
# 95 "CoalParser.fsy"
                 : 'BinOp));
# 1037 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CoalParser.fsy"
                                   
                   )
# 96 "CoalParser.fsy"
                 : 'BinOp));
# 1047 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CoalParser.fsy"
                                 
                   )
# 98 "CoalParser.fsy"
                 : 'UnOp));
# 1057 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CoalParser.fsy"
                                  
                   )
# 99 "CoalParser.fsy"
                 : 'UnOp));
# 1067 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CoalParser.fsy"
                                      
                   )
# 100 "CoalParser.fsy"
                 : 'UnOp));
# 1077 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CoalParser.fsy"
                                        
                   )
# 101 "CoalParser.fsy"
                 : 'UnOp));
|]
# 1088 "CoalParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 51;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
