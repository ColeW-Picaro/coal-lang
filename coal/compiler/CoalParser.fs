// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CoalParser.fsy"

open Ast

# 10 "CoalParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COLON
  | COMMA
  | DOT
  | SLASH
  | STAR
  | MINUS
  | PLUS
  | SEMICOLON
  | BANG_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | EQUAL_EQUAL
  | AND
  | OR
  | PLUS_PLUS
  | MINUS_MINUS
  | DOT_DOT
  | BANG
  | GREATER
  | LESS
  | EQUAL
  | NIL
  | STRING
  | INT
  | FLOAT
  | BOOL
  | LET
  | CLASS
  | SUPER
  | THIS
  | LPAREN
  | RPAREN
  | WHILE
  | FOR
  | UNTIL
  | IN
  | DO
  | END
  | IF
  | THEN
  | ELSE
  | UNLESS
  | EOF
  | STRING_LIT of (string)
  | BOOL_LIT of (bool)
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_SEMICOLON
    | TOKEN_BANG_EQUAL
    | TOKEN_GREATER_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_EQUAL_EQUAL
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS_PLUS
    | TOKEN_MINUS_MINUS
    | TOKEN_DOT_DOT
    | TOKEN_BANG
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_EQUAL
    | TOKEN_NIL
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_LET
    | TOKEN_CLASS
    | TOKEN_SUPER
    | TOKEN_THIS
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_UNTIL
    | TOKEN_IN
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNLESS
    | TOKEN_EOF
    | TOKEN_STRING_LIT
    | TOKEN_BOOL_LIT
    | TOKEN_FLOAT_LIT
    | TOKEN_INT_LIT
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Stmt
    | NONTERM_Assign
    | NONTERM_Expr
    | NONTERM_BoolExpr
    | NONTERM_ParamList
    | NONTERM_ExprList
    | NONTERM_Vardef
    | NONTERM_Formal
    | NONTERM_FuncDeclList
    | NONTERM_FormalDeclList
    | NONTERM_Funcdef
    | NONTERM_StmtList
    | NONTERM_Type
    | NONTERM_BoolOp
    | NONTERM_BinOp
    | NONTERM_UnOp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COLON  -> 0 
  | COMMA  -> 1 
  | DOT  -> 2 
  | SLASH  -> 3 
  | STAR  -> 4 
  | MINUS  -> 5 
  | PLUS  -> 6 
  | SEMICOLON  -> 7 
  | BANG_EQUAL  -> 8 
  | GREATER_EQUAL  -> 9 
  | LESS_EQUAL  -> 10 
  | EQUAL_EQUAL  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | PLUS_PLUS  -> 14 
  | MINUS_MINUS  -> 15 
  | DOT_DOT  -> 16 
  | BANG  -> 17 
  | GREATER  -> 18 
  | LESS  -> 19 
  | EQUAL  -> 20 
  | NIL  -> 21 
  | STRING  -> 22 
  | INT  -> 23 
  | FLOAT  -> 24 
  | BOOL  -> 25 
  | LET  -> 26 
  | CLASS  -> 27 
  | SUPER  -> 28 
  | THIS  -> 29 
  | LPAREN  -> 30 
  | RPAREN  -> 31 
  | WHILE  -> 32 
  | FOR  -> 33 
  | UNTIL  -> 34 
  | IN  -> 35 
  | DO  -> 36 
  | END  -> 37 
  | IF  -> 38 
  | THEN  -> 39 
  | ELSE  -> 40 
  | UNLESS  -> 41 
  | EOF  -> 42 
  | STRING_LIT _ -> 43 
  | BOOL_LIT _ -> 44 
  | FLOAT_LIT _ -> 45 
  | INT_LIT _ -> 46 
  | IDENTIFIER _ -> 47 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COLON 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_SLASH 
  | 4 -> TOKEN_STAR 
  | 5 -> TOKEN_MINUS 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_SEMICOLON 
  | 8 -> TOKEN_BANG_EQUAL 
  | 9 -> TOKEN_GREATER_EQUAL 
  | 10 -> TOKEN_LESS_EQUAL 
  | 11 -> TOKEN_EQUAL_EQUAL 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_PLUS_PLUS 
  | 15 -> TOKEN_MINUS_MINUS 
  | 16 -> TOKEN_DOT_DOT 
  | 17 -> TOKEN_BANG 
  | 18 -> TOKEN_GREATER 
  | 19 -> TOKEN_LESS 
  | 20 -> TOKEN_EQUAL 
  | 21 -> TOKEN_NIL 
  | 22 -> TOKEN_STRING 
  | 23 -> TOKEN_INT 
  | 24 -> TOKEN_FLOAT 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_LET 
  | 27 -> TOKEN_CLASS 
  | 28 -> TOKEN_SUPER 
  | 29 -> TOKEN_THIS 
  | 30 -> TOKEN_LPAREN 
  | 31 -> TOKEN_RPAREN 
  | 32 -> TOKEN_WHILE 
  | 33 -> TOKEN_FOR 
  | 34 -> TOKEN_UNTIL 
  | 35 -> TOKEN_IN 
  | 36 -> TOKEN_DO 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_IF 
  | 39 -> TOKEN_THEN 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_UNLESS 
  | 42 -> TOKEN_EOF 
  | 43 -> TOKEN_STRING_LIT 
  | 44 -> TOKEN_BOOL_LIT 
  | 45 -> TOKEN_FLOAT_LIT 
  | 46 -> TOKEN_INT_LIT 
  | 47 -> TOKEN_IDENTIFIER 
  | 50 -> TOKEN_end_of_input
  | 48 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Stmt 
    | 4 -> NONTERM_Stmt 
    | 5 -> NONTERM_Stmt 
    | 6 -> NONTERM_Stmt 
    | 7 -> NONTERM_Stmt 
    | 8 -> NONTERM_Stmt 
    | 9 -> NONTERM_Stmt 
    | 10 -> NONTERM_Stmt 
    | 11 -> NONTERM_Stmt 
    | 12 -> NONTERM_Stmt 
    | 13 -> NONTERM_Assign 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_BoolExpr 
    | 23 -> NONTERM_ParamList 
    | 24 -> NONTERM_ParamList 
    | 25 -> NONTERM_ExprList 
    | 26 -> NONTERM_ExprList 
    | 27 -> NONTERM_Vardef 
    | 28 -> NONTERM_Vardef 
    | 29 -> NONTERM_Vardef 
    | 30 -> NONTERM_Formal 
    | 31 -> NONTERM_FuncDeclList 
    | 32 -> NONTERM_FuncDeclList 
    | 33 -> NONTERM_FormalDeclList 
    | 34 -> NONTERM_FormalDeclList 
    | 35 -> NONTERM_Funcdef 
    | 36 -> NONTERM_StmtList 
    | 37 -> NONTERM_StmtList 
    | 38 -> NONTERM_Type 
    | 39 -> NONTERM_Type 
    | 40 -> NONTERM_Type 
    | 41 -> NONTERM_Type 
    | 42 -> NONTERM_Type 
    | 43 -> NONTERM_BoolOp 
    | 44 -> NONTERM_BoolOp 
    | 45 -> NONTERM_BoolOp 
    | 46 -> NONTERM_BoolOp 
    | 47 -> NONTERM_BoolOp 
    | 48 -> NONTERM_BoolOp 
    | 49 -> NONTERM_BoolOp 
    | 50 -> NONTERM_BoolOp 
    | 51 -> NONTERM_BinOp 
    | 52 -> NONTERM_BinOp 
    | 53 -> NONTERM_BinOp 
    | 54 -> NONTERM_BinOp 
    | 55 -> NONTERM_BinOp 
    | 56 -> NONTERM_UnOp 
    | 57 -> NONTERM_UnOp 
    | 58 -> NONTERM_UnOp 
    | 59 -> NONTERM_UnOp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 50 
let _fsyacc_tagOfErrorTerminal = 48

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | SEMICOLON  -> "SEMICOLON" 
  | BANG_EQUAL  -> "BANG_EQUAL" 
  | GREATER_EQUAL  -> "GREATER_EQUAL" 
  | LESS_EQUAL  -> "LESS_EQUAL" 
  | EQUAL_EQUAL  -> "EQUAL_EQUAL" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | PLUS_PLUS  -> "PLUS_PLUS" 
  | MINUS_MINUS  -> "MINUS_MINUS" 
  | DOT_DOT  -> "DOT_DOT" 
  | BANG  -> "BANG" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | EQUAL  -> "EQUAL" 
  | NIL  -> "NIL" 
  | STRING  -> "STRING" 
  | INT  -> "INT" 
  | FLOAT  -> "FLOAT" 
  | BOOL  -> "BOOL" 
  | LET  -> "LET" 
  | CLASS  -> "CLASS" 
  | SUPER  -> "SUPER" 
  | THIS  -> "THIS" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | UNTIL  -> "UNTIL" 
  | IN  -> "IN" 
  | DO  -> "DO" 
  | END  -> "END" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | UNLESS  -> "UNLESS" 
  | EOF  -> "EOF" 
  | STRING_LIT _ -> "STRING_LIT" 
  | BOOL_LIT _ -> "BOOL_LIT" 
  | FLOAT_LIT _ -> "FLOAT_LIT" 
  | INT_LIT _ -> "INT_LIT" 
  | IDENTIFIER _ -> "IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | BANG_EQUAL  -> (null : System.Object) 
  | GREATER_EQUAL  -> (null : System.Object) 
  | LESS_EQUAL  -> (null : System.Object) 
  | EQUAL_EQUAL  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | PLUS_PLUS  -> (null : System.Object) 
  | MINUS_MINUS  -> (null : System.Object) 
  | DOT_DOT  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | SUPER  -> (null : System.Object) 
  | THIS  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | UNTIL  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | UNLESS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 9us; 65535us; 3us; 90us; 12us; 13us; 26us; 27us; 29us; 90us; 34us; 35us; 36us; 37us; 41us; 42us; 62us; 77us; 88us; 89us; 9us; 65535us; 3us; 7us; 12us; 7us; 26us; 7us; 29us; 7us; 34us; 7us; 36us; 7us; 41us; 7us; 62us; 7us; 88us; 7us; 23us; 65535us; 3us; 43us; 10us; 58us; 12us; 43us; 20us; 21us; 22us; 58us; 24us; 25us; 26us; 43us; 29us; 43us; 32us; 58us; 34us; 43us; 36us; 43us; 39us; 58us; 41us; 43us; 46us; 47us; 52us; 60us; 62us; 43us; 63us; 55us; 64us; 56us; 65us; 57us; 67us; 59us; 69us; 61us; 75us; 62us; 88us; 43us; 4us; 65535us; 10us; 11us; 22us; 23us; 32us; 33us; 39us; 40us; 1us; 65535us; 52us; 53us; 1us; 65535us; 52us; 68us; 9us; 65535us; 3us; 5us; 12us; 5us; 26us; 5us; 29us; 5us; 34us; 5us; 36us; 5us; 41us; 5us; 62us; 5us; 88us; 5us; 2us; 65535us; 83us; 84us; 85us; 82us; 1us; 65535us; 85us; 86us; 1us; 65535us; 85us; 81us; 9us; 65535us; 3us; 6us; 12us; 6us; 26us; 6us; 29us; 6us; 34us; 6us; 36us; 6us; 41us; 6us; 62us; 6us; 88us; 6us; 2us; 65535us; 0us; 3us; 28us; 29us; 4us; 65535us; 18us; 19us; 72us; 73us; 79us; 80us; 87us; 88us; 12us; 65535us; 21us; 104us; 25us; 104us; 43us; 104us; 47us; 104us; 55us; 104us; 56us; 104us; 57us; 104us; 58us; 67us; 59us; 104us; 60us; 104us; 61us; 104us; 62us; 104us; 12us; 65535us; 21us; 63us; 25us; 63us; 43us; 63us; 47us; 63us; 55us; 63us; 56us; 63us; 57us; 63us; 58us; 63us; 59us; 63us; 60us; 63us; 61us; 63us; 62us; 63us; 23us; 65535us; 3us; 64us; 10us; 64us; 12us; 64us; 20us; 64us; 22us; 64us; 24us; 64us; 26us; 64us; 29us; 64us; 32us; 64us; 34us; 64us; 36us; 64us; 39us; 64us; 41us; 64us; 46us; 64us; 52us; 64us; 62us; 64us; 63us; 64us; 64us; 64us; 65us; 64us; 67us; 64us; 69us; 64us; 75us; 64us; 88us; 64us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 15us; 25us; 49us; 54us; 56us; 58us; 68us; 71us; 73us; 75us; 85us; 88us; 93us; 106us; 119us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 37us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 7us; 19us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 7us; 19us; 1us; 7us; 1us; 7us; 1us; 8us; 2us; 8us; 37us; 1us; 8us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 2us; 9us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 12us; 19us; 1us; 12us; 3us; 13us; 14us; 18us; 1us; 13us; 2us; 13us; 19us; 2us; 14us; 18us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 2us; 19us; 19us; 2us; 19us; 20us; 2us; 19us; 21us; 2us; 19us; 22us; 2us; 19us; 22us; 2us; 19us; 25us; 2us; 19us; 26us; 3us; 19us; 28us; 29us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 2us; 22us; 51us; 2us; 24us; 26us; 1us; 26us; 4us; 27us; 28us; 29us; 35us; 4us; 27us; 28us; 29us; 35us; 3us; 27us; 28us; 29us; 3us; 27us; 28us; 29us; 1us; 27us; 2us; 28us; 29us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 2us; 32us; 34us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 2us; 55us; 57us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 46us; 48us; 50us; 52us; 55us; 57us; 59us; 61us; 64us; 66us; 69us; 72us; 75us; 78us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 98us; 100us; 104us; 106us; 109us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 127us; 130us; 133us; 136us; 139us; 142us; 145us; 149us; 151us; 153us; 155us; 157us; 160us; 163us; 165us; 170us; 175us; 179us; 183us; 185us; 188us; 190us; 192us; 194us; 196us; 198us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 258us; 260us; 262us; 264us; |]
let _fsyacc_action_rows = 114
let _fsyacc_actionTableElements = [|0us; 16420us; 0us; 49152us; 0us; 16385us; 16us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 42us; 4us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 1us; 32768us; 7us; 8us; 0us; 16389us; 1us; 32768us; 30us; 10us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 31us; 12us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16390us; 1us; 32768us; 30us; 15us; 1us; 32768us; 26us; 16us; 1us; 32768us; 47us; 17us; 1us; 32768us; 0us; 18us; 5us; 32768us; 21us; 95us; 22us; 91us; 23us; 92us; 24us; 93us; 25us; 94us; 1us; 32768us; 20us; 20us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 13us; 32768us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 7us; 22us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 7us; 24us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 13us; 32768us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 31us; 26us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16391us; 0us; 16420us; 16us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 37us; 30us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16392us; 1us; 32768us; 30us; 32us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 31us; 34us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 1us; 16393us; 40us; 36us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16394us; 1us; 32768us; 30us; 39us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 31us; 41us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16395us; 13us; 32768us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 7us; 44us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 0us; 16396us; 2us; 16398us; 20us; 46us; 30us; 52us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 12us; 16397us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 1us; 16398us; 30us; 52us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 9us; 16407us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 31us; 54us; 0us; 16402us; 12us; 16403us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 12us; 16404us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 13us; 32768us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 31us; 66us; 12us; 32768us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 12us; 16406us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 12us; 16409us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 12us; 16410us; 3us; 106us; 4us; 105us; 5us; 108us; 6us; 107us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 18us; 103us; 19us; 102us; 27us; 32768us; 3us; 106us; 4us; 105us; 5us; 109us; 6us; 107us; 7us; 76us; 8us; 96us; 9us; 97us; 10us; 98us; 11us; 99us; 12us; 100us; 13us; 101us; 14us; 112us; 15us; 113us; 17us; 110us; 18us; 103us; 19us; 102us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 0us; 16405us; 9us; 16435us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 16408us; 1us; 69us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 1us; 32768us; 47us; 71us; 2us; 32768us; 0us; 72us; 30us; 85us; 5us; 32768us; 21us; 95us; 22us; 91us; 23us; 92us; 24us; 93us; 25us; 94us; 2us; 32768us; 7us; 74us; 20us; 75us; 0us; 16411us; 9us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 30us; 65us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 48us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 0us; 79us; 5us; 32768us; 21us; 95us; 22us; 91us; 23us; 92us; 24us; 93us; 25us; 94us; 0us; 16414us; 1us; 16416us; 1us; 83us; 0us; 16417us; 1us; 32768us; 47us; 78us; 0us; 16418us; 1us; 16415us; 47us; 78us; 1us; 32768us; 31us; 87us; 5us; 32768us; 21us; 95us; 22us; 91us; 23us; 92us; 24us; 93us; 25us; 94us; 15us; 32768us; 5us; 111us; 14us; 112us; 15us; 113us; 17us; 110us; 26us; 70us; 30us; 65us; 32us; 9us; 33us; 14us; 36us; 28us; 38us; 31us; 41us; 38us; 43us; 51us; 45us; 50us; 46us; 49us; 47us; 45us; 0us; 16419us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; 2us; 3us; 20us; 21us; 22us; 23us; 25us; 26us; 28us; 38us; 40us; 56us; 57us; 59us; 61us; 63us; 65us; 71us; 73us; 83us; 97us; 107us; 109us; 119us; 133us; 149us; 150us; 151us; 168us; 169us; 171us; 181us; 183us; 199us; 201us; 217us; 218us; 220us; 230us; 232us; 248us; 249us; 263us; 264us; 267us; 277us; 290us; 292us; 293us; 294us; 295us; 305us; 307us; 308us; 321us; 334us; 348us; 361us; 374us; 387us; 400us; 428us; 438us; 448us; 458us; 459us; 469us; 471us; 481us; 483us; 486us; 492us; 495us; 496us; 506us; 507us; 508us; 510us; 516us; 517us; 519us; 520us; 522us; 523us; 525us; 527us; 533us; 549us; 550us; 551us; 552us; 553us; 554us; 555us; 556us; 557us; 558us; 559us; 560us; 561us; 562us; 563us; 564us; 565us; 566us; 567us; 568us; 569us; 570us; 571us; 572us; 573us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 1us; 2us; 5us; 14us; 3us; 5us; 7us; 5us; 2us; 3us; 1us; 1us; 1us; 1us; 4us; 3us; 2us; 3us; 3us; 0us; 1us; 1us; 3us; 5us; 7us; 7us; 3us; 0us; 1us; 1us; 3us; 7us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 16417us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 16439us; 65535us; 16440us; 16441us; 16442us; 16443us; |]
let _fsyacc_reductions ()  =    [| 
# 424 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 433 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "CoalParser.fsy"
                                    _1 
                   )
# 21 "CoalParser.fsy"
                 : Ast.Prog));
# 444 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "CoalParser.fsy"
                                          List.rev(_1) 
                   )
# 24 "CoalParser.fsy"
                 : 'Prog));
# 455 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "CoalParser.fsy"
                                    _1 
                   )
# 27 "CoalParser.fsy"
                 : 'Stmt));
# 466 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Funcdef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "CoalParser.fsy"
                                     _1 
                   )
# 28 "CoalParser.fsy"
                 : 'Stmt));
# 477 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "CoalParser.fsy"
                                              _1 
                   )
# 29 "CoalParser.fsy"
                 : 'Stmt));
# 488 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "CoalParser.fsy"
                                                               While(_3,_5) 
                   )
# 30 "CoalParser.fsy"
                 : 'Stmt));
# 500 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "CoalParser.fsy"
                                                                                                                          
                             Seq [ Vardef ((_4, _6), Some _8) ; While(_10, Seq [_14 ; Expr _12] )]
                           
                   )
# 32 "CoalParser.fsy"
                 : 'Stmt));
# 518 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "CoalParser.fsy"
                                             Seq(List.rev(_2)) 
                   )
# 35 "CoalParser.fsy"
                 : 'Stmt));
# 529 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "CoalParser.fsy"
                                                            IfThenElse(_3,_5, None) 
                   )
# 36 "CoalParser.fsy"
                 : 'Stmt));
# 541 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "CoalParser.fsy"
                                                                      IfThenElse(_3,_5, Some _7) 
                   )
# 37 "CoalParser.fsy"
                 : 'Stmt));
# 554 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "CoalParser.fsy"
                                                                IfThenElse(_3, _5, None) 
                   )
# 38 "CoalParser.fsy"
                 : 'Stmt));
# 566 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "CoalParser.fsy"
                                            Expr _1 
                   )
# 39 "CoalParser.fsy"
                 : 'Stmt));
# 577 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "CoalParser.fsy"
                                                      Assign(_1,_3) 
                   )
# 41 "CoalParser.fsy"
                 : 'Assign));
# 589 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CoalParser.fsy"
                                        Val(_1) 
                   )
# 43 "CoalParser.fsy"
                 : 'Expr));
# 600 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "CoalParser.fsy"
                                      Int(_1) 
                   )
# 44 "CoalParser.fsy"
                 : 'Expr));
# 611 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CoalParser.fsy"
                                        Float(_1) 
                   )
# 45 "CoalParser.fsy"
                 : 'Expr));
# 622 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CoalParser.fsy"
                                        String(_1) 
                   )
# 46 "CoalParser.fsy"
                 : 'Expr));
# 633 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParamList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CoalParser.fsy"
                                                                FuncCall(_1, _3) 
                   )
# 47 "CoalParser.fsy"
                 : 'Expr));
# 645 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BinOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CoalParser.fsy"
                                             BinOp(_1, _2, _3) 
                   )
# 48 "CoalParser.fsy"
                 : 'Expr));
# 658 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UnOp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CoalParser.fsy"
                                       UnOp(_1, _2) 
                   )
# 49 "CoalParser.fsy"
                 : 'Expr));
# 670 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CoalParser.fsy"
                                                _2 
                   )
# 50 "CoalParser.fsy"
                 : 'Expr));
# 681 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CoalParser.fsy"
                                                  BinOp(_1, _2, _3) 
                   )
# 52 "CoalParser.fsy"
                 : 'BoolExpr));
# 694 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CoalParser.fsy"
                                  [] 
                   )
# 54 "CoalParser.fsy"
                 : 'ParamList));
# 704 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CoalParser.fsy"
                                           _1 
                   )
# 55 "CoalParser.fsy"
                 : 'ParamList));
# 715 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CoalParser.fsy"
                                      [_1] 
                   )
# 57 "CoalParser.fsy"
                 : 'ExprList));
# 726 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CoalParser.fsy"
                                                     _3 :: _1 
                   )
# 58 "CoalParser.fsy"
                 : 'ExprList));
# 738 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CoalParser.fsy"
                                                                   Vardef((_2, _4), None) 
                   )
# 61 "CoalParser.fsy"
                 : 'Vardef));
# 750 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CoalParser.fsy"
                                                                              Vardef((_2, _4), Some _6) 
                   )
# 62 "CoalParser.fsy"
                 : 'Vardef));
# 763 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CoalParser.fsy"
                                                                         Seq [Vardef((_2, _4), Some _6) ; _7] 
                   )
# 63 "CoalParser.fsy"
                 : 'Vardef));
# 777 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CoalParser.fsy"
                                                     (_1, _3) 
                   )
# 67 "CoalParser.fsy"
                 : 'Formal));
# 789 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CoalParser.fsy"
                                     None 
                   )
# 69 "CoalParser.fsy"
                 : 'FuncDeclList));
# 799 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FormalDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CoalParser.fsy"
                                                Some (List.rev _1) 
                   )
# 70 "CoalParser.fsy"
                 : 'FuncDeclList));
# 810 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Formal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CoalParser.fsy"
                                              (_1)::[] 
                   )
# 72 "CoalParser.fsy"
                 : 'FormalDeclList));
# 821 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FormalDeclList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Formal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CoalParser.fsy"
                                                                  _3 :: _1 
                   )
# 73 "CoalParser.fsy"
                 : 'FormalDeclList));
# 833 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'FuncDeclList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CoalParser.fsy"
                                                                                   
                                Funcdef((_2, _6), _4, _7) 
                   )
# 76 "CoalParser.fsy"
                 : 'Funcdef));
# 848 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CoalParser.fsy"
                                 [] 
                   )
# 80 "CoalParser.fsy"
                 : 'StmtList));
# 858 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CoalParser.fsy"
                                               _2 :: _1  
                   )
# 81 "CoalParser.fsy"
                 : 'StmtList));
# 870 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CoalParser.fsy"
                                    StringType 
                   )
# 83 "CoalParser.fsy"
                 : 'Type));
# 880 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CoalParser.fsy"
                                 IntType 
                   )
# 84 "CoalParser.fsy"
                 : 'Type));
# 890 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CoalParser.fsy"
                                   FloatType 
                   )
# 85 "CoalParser.fsy"
                 : 'Type));
# 900 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CoalParser.fsy"
                                  BoolType 
                   )
# 86 "CoalParser.fsy"
                 : 'Type));
# 910 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CoalParser.fsy"
                                 NilType 
                   )
# 87 "CoalParser.fsy"
                 : 'Type));
# 920 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CoalParser.fsy"
                                          OpNotEqual 
                   )
# 89 "CoalParser.fsy"
                 : 'BoolOp));
# 930 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CoalParser.fsy"
                                             OpGreaterEqual 
                   )
# 90 "CoalParser.fsy"
                 : 'BoolOp));
# 940 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CoalParser.fsy"
                                          OpLessEqual 
                   )
# 91 "CoalParser.fsy"
                 : 'BoolOp));
# 950 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CoalParser.fsy"
                                           OpEqual 
                   )
# 92 "CoalParser.fsy"
                 : 'BoolOp));
# 960 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CoalParser.fsy"
                                   OpAnd 
                   )
# 93 "CoalParser.fsy"
                 : 'BoolOp));
# 970 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CoalParser.fsy"
                                  OpOr 
                   )
# 94 "CoalParser.fsy"
                 : 'BoolOp));
# 980 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CoalParser.fsy"
                                    OpLess 
                   )
# 95 "CoalParser.fsy"
                 : 'BoolOp));
# 990 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CoalParser.fsy"
                                       OpGreater 
                   )
# 96 "CoalParser.fsy"
                 : 'BoolOp));
# 1000 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BoolOp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CoalParser.fsy"
                                     _1 
                   )
# 98 "CoalParser.fsy"
                 : 'BinOp));
# 1011 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CoalParser.fsy"
                                   OpMul 
                   )
# 99 "CoalParser.fsy"
                 : 'BinOp));
# 1021 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CoalParser.fsy"
                                    OpDiv 
                   )
# 100 "CoalParser.fsy"
                 : 'BinOp));
# 1031 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CoalParser.fsy"
                                   OpPlus 
                   )
# 101 "CoalParser.fsy"
                 : 'BinOp));
# 1041 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CoalParser.fsy"
                                    OpMinus 
                   )
# 102 "CoalParser.fsy"
                 : 'BinOp));
# 1051 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CoalParser.fsy"
                                  OpBoolNegate 
                   )
# 104 "CoalParser.fsy"
                 : 'UnOp));
# 1061 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CoalParser.fsy"
                                   OpValNegate 
                   )
# 105 "CoalParser.fsy"
                 : 'UnOp));
# 1071 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CoalParser.fsy"
                                       OpIncr 
                   )
# 106 "CoalParser.fsy"
                 : 'UnOp));
# 1081 "CoalParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CoalParser.fsy"
                                         OpDecr 
                   )
# 107 "CoalParser.fsy"
                 : 'UnOp));
|]
# 1092 "CoalParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 51;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
