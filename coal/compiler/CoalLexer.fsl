//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
{

module Lexer

open FSharp.Text.Lexing
open System
// open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine


type token =
  | INT_LIT of int
  | FLOAT_LIT of float
  | STRING_LIT of string
  | BOOL_LIT of bool
  | IDENTIFIER of string
  | NIL
  | STRING
  | INT
  | FLOAT
  | BOOL
  | LET
  | DO
  | END
  | IF
  | FOR
  | IN
  | WHILE
  | UNTIL
  | UNLESS
  | CLASS
  | SUPER
  | THIS
  | BANG_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | EQUAL_EQUAL
  | PLUS_PLUS
  | MINUS_MINUS
  | AND
  | OR
  | DOT_DOT
  | BANG
  | GREATER
  | LESS
  | EQUAL
  | LPAREN
  | RPAREN
  | COLON
  | COMMA
  | DOT
  | SLASH
  | STAR
  | MINUS
  | PLUS
  | SEMICOLON
  | EOF

}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let frac = '.' digit*
let exp = ['e' 'E'] ['-' '+']? digit+
let float = '-'? digit* frac? exp?
let str = '"' [^'"']* '"'
let id = ['A'-'Z' 'a'-'z'] ['A'-'Z' 'a'-'z' '0'-'9' '_']*

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"
let comment = '/''/' [^ '\r' '\n']* newline

rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | comment  { newline lexbuf; read lexbuf }
  | int      { INT_LIT (int (lexeme lexbuf)) }
  | float    { FLOAT_LIT (float (lexeme lexbuf)) }
  | str      { STRING_LIT (string (lexeme lexbuf)) }
  | "true"   { BOOL_LIT (true) }
  | "false"  { BOOL_LIT (false) }  
  | "string" { STRING }    
  | "int"    { INT }  
  | "nil"    { NIL }
  | "float"  { FLOAT }
  | "bool"   { BOOL }
  | "let"    { LET }
  | "do"     { DO }
  | "end"    { END }
  | "if"     { IF }
  | "for"    { FOR }  
  | "in"     { IN }
  | "while"  { WHILE }
  | "until"  { UNTIL }
  | "unless" { UNLESS }
  | "class"  { CLASS }
  | "super"  { SUPER }
  | "this"   { THIS }
  | "!="     { BANG_EQUAL }
  | ">="     { GREATER_EQUAL }
  | "<="     { LESS_EQUAL }
  | "=="     { EQUAL_EQUAL }  
  | "&&"     { AND }
  | "||"     { OR }
  | ".."     { DOT_DOT }
  | "!"      { BANG }
  | ">"      { GREATER }
  | "<"      { LESS }
  | "="      { EQUAL }
  | '('      { LPAREN }
  | ')'      { RPAREN }
  | ':'      { COLON }
  | ','      { COMMA }
  | '.'      { DOT }
  | '/'      { SLASH }
  | '*'      { STAR }
  | '-'      { MINUS }
  | '+'      { PLUS }
  | ';'      { SEMICOLON }
  | id       { IDENTIFIER (string (lexeme lexbuf)) }
  | eof      { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }

