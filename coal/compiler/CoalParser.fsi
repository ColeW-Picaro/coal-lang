// Signature file for parser generated by fsyacc
type token = 
  | COLON
  | COMMA
  | DOT
  | SLASH
  | STAR
  | MINUS
  | PLUS
  | SEMICOLON
  | BANG_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | EQUAL_EQUAL
  | AND
  | OR
  | PLUS_PLUS
  | MINUS_MINUS
  | DOT_DOT
  | BANG
  | GREATER
  | LESS
  | EQUAL
  | NIL
  | STRING
  | INT
  | FLOAT
  | BOOL
  | LET
  | CLASS
  | SUPER
  | THIS
  | LPAREN
  | RPAREN
  | WHILE
  | FOR
  | UNTIL
  | IN
  | DO
  | END
  | IF
  | THEN
  | ELSE
  | UNLESS
  | EOF
  | STRING_LIT of (string)
  | BOOL_LIT of (bool)
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | IDENTIFIER of (string)
type tokenId = 
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_SEMICOLON
    | TOKEN_BANG_EQUAL
    | TOKEN_GREATER_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_EQUAL_EQUAL
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS_PLUS
    | TOKEN_MINUS_MINUS
    | TOKEN_DOT_DOT
    | TOKEN_BANG
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_EQUAL
    | TOKEN_NIL
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_LET
    | TOKEN_CLASS
    | TOKEN_SUPER
    | TOKEN_THIS
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_UNTIL
    | TOKEN_IN
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNLESS
    | TOKEN_EOF
    | TOKEN_STRING_LIT
    | TOKEN_BOOL_LIT
    | TOKEN_FLOAT_LIT
    | TOKEN_INT_LIT
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Stmt
    | NONTERM_Expr
    | NONTERM_BoolExpr
    | NONTERM_ParamList
    | NONTERM_ExprList
    | NONTERM_Vardef
    | NONTERM_Formal
    | NONTERM_FuncDeclList
    | NONTERM_FormalDeclList
    | NONTERM_Funcdef
    | NONTERM_StmtList
    | NONTERM_NilStmt
    | NONTERM_Type
    | NONTERM_BoolOp
    | NONTERM_BinOp
    | NONTERM_UnOp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.Prog) 
