%{
open Ast
%}

// Declarations
%start start
%token <string> IDENTIFIER
%token <int> INT_LIT
%token <float> FLOAT_LIT
%token <bool> BOOL_LIT
%token <string> STRING_LIT
%token LPAREN RPAREN WHILE FOR UNTIL IN DO END IF THEN ELSE UNLESS EOF
%token NIL STRING INT FLOAT BOOL LET CLASS SUPER THIS
%token BANG_EQUAL GREATER_EQUAL LESS_EQUAL EQUAL_EQUAL AND OR PLUS_PLUS MINUS_MINUS DOT_DOT BANG GREATER LESS EQUAL
%token COLON COMMA DOT SLASH STAR MINUS PLUS SEMICOLON
%type <Ast.Prog> start

%%
// Rules

start: Prog {  $1 }


Prog: StmtList EOF { List.rev($1) }

// Statements and Expressions
Stmt: Vardef { $1 }
    | Funcdef { $1 }
    | Assign SEMICOLON { $1 }
    | WHILE LPAREN BoolExpr RPAREN Stmt { While($3,$5) }
   // $1  $2     $3  $4         $5    $6   $7    $8   $9        $10      $11       $12    $13    $14
    | FOR LPAREN LET IDENTIFIER COLON Type EQUAL Expr SEMICOLON BoolExpr SEMICOLON Expr RPAREN Stmt {
        Seq [ Vardef (($4, $6), Some $8) ; While($10, Seq [$14 ; Expr $12] )]
      }
    | DO StmtList END { Seq(List.rev($2)) }
    | IF LPAREN BoolExpr RPAREN Stmt { IfThenElse($3,$5, None) }
    | IF LPAREN BoolExpr RPAREN Stmt ELSE Stmt { IfThenElse($3,$5, Some $7) }
    | UNLESS LPAREN BoolExpr RPAREN Stmt { IfThenElse($3, $5, None) }
    | Expr SEMICOLON { Expr $1 }

Assign : IDENTIFIER EQUAL Expr { Assign($1,$3) }

Expr: IDENTIFIER { Val($1) }
    | INT_LIT {  Int($1) }
    | FLOAT_LIT {  Float($1) }
    | STRING_LIT { String($1) }
    | IDENTIFIER LPAREN ParamList RPAREN { FuncCall($1, $3) }
    | Expr BinOp Expr { BinOp($1, $2, $3) }
    | UnOp Expr { UnOp($1, $2) }
    | LPAREN Expr RPAREN { $2 }    

BoolExpr: Expr BoolOp Expr { BinOp($1, $2, $3) }

ParamList: { [] }
         | ExprList { $1 }

ExprList: Expr { [$1] }
        | ExprList COMMA Expr { $3 :: $1 }  


Vardef: LET IDENTIFIER COLON Type SEMICOLON { Vardef(($2, $4), None) }
      | LET IDENTIFIER COLON Type EQUAL Expr SEMICOLON { Vardef(($2, $4), Some $6) }      
      | LET IDENTIFIER COLON Type EQUAL Expr Stmt { Seq [Vardef(($2, $4), Some $6) ; $7] }

// Functions

Formal: IDENTIFIER COLON Type { ($1, $3) }

FuncDeclList: { None }
        | FormalDeclList { Some (List.rev $1) }

FormalDeclList: Formal { ($1)::[] }
             | FormalDeclList COMMA Formal { $3 :: $1 }

//           $2                $4                  $6   $7
Funcdef: LET IDENTIFIER LPAREN FuncDeclList RPAREN Type Stmt {
           Funcdef(($2, $6), $4, $7) }


StmtList: { [] }
        | StmtList Stmt { $2 :: $1  }

Type: STRING { StringType }
    | INT { IntType }
    | FLOAT { FloatType }
    | BOOL { BoolType }
    | NIL { NilType } 

BoolOp: BANG_EQUAL { OpNotEqual }
      | GREATER_EQUAL { OpGreaterEqual }
      | LESS_EQUAL { OpLessEqual }
      | EQUAL_EQUAL { OpEqual }
      | AND { OpAnd }
      | OR { OpOr }
      | LESS { OpLess }
      | GREATER { OpGreater }

BinOp: BoolOp { $1 }
     | STAR { OpMul }
     | SLASH { OpDiv }
     | PLUS { OpPlus }
     | MINUS { OpMinus }

UnOp: BANG { OpBoolNegate }
    | MINUS { OpValNegate }
    | PLUS_PLUS { OpIncr }
    | MINUS_MINUS { OpDecr }






