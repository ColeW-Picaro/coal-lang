%{
open Ast
%}

// Declarations
%start start
%token <string> IDENTIFIER
%token <int> INT_LIT
%token <float> FLOAT_LIT
%token <bool> BOOL_LIT
%token <string> STRING_LIT
%token LPAREN RPAREN WHILE FOR UNTIL IN DO END IF THEN ELSE UNLESS EOF
%token NIL STRING INT FLOAT BOOL LET CLASS SUPER THIS
%token BANG_EQUAL GREATER_EQUAL LESS_EQUAL EQUAL_EQUAL AND OR PLUS_PLUS MINUS_MINUS DOT_DOT BANG GREATER LESS EQUAL
%token COLON COMMA DOT SLASH STAR MINUS PLUS SEMICOLON
%type <Ast.Prog> start

%%
// Rules

start: Prog {  $1 }


Prog: StmtList EOF { Prog(List.rev($1)) }

// Statements and Expressions
Stmt: Vardef { $1 }
    | Funcdef { $1 }
    | IDENTIFIER EQUAL Expr SEMICOLON { Assign($1,$3) }
    | WHILE LPAREN BoolExpr RPAREN DO Stmt { While($3,$5) }
    | FOR LPAREN LET IDENTIFIER COLON Type EQUAL Expr SEMICOLON BoolExpr SEMICOLON Expr RPAREN DO StmtList END { Seq [Vardef($4, $6, $8) ; While($10, $15 @ [$12])] }
    | DO StmtList END { Seq(List.rev($2)) }
    | IF LPAREN BoolExpr RPAREN Stmt { IfThenElse($3,$5, NilStmt) }
    | IF LPAREN BoolExpr RPAREN Stmt ELSE Stmt { IfThenElse($3,$5,$7) }
    | UNLESS LPAREN BoolExpr RPAREN Stmt { IfThenElse($3, $5, NilStmt) }
    | Expr SEMICOLON { $1 }

Expr: IDENTIFIER { Val($1) }
    | INT_LIT {  Int($1) }
    | FLOAT_LIT {  Float($1) }
    | STRING_LIT { String($1) }
    | IDENTIFIER LPAREN ParamList RPAREN { FuncCall($1, $3) }
    | Expr BinOp Expr { BinOp($1, $2, $3) }
    | UnOp Expr { UnOp($1, $2) }
    | LPAREN Expr RPAREN { $2 }    

BoolExpr: Expr BoolOp Expr { BinOp($1, $2, $3) }

ParamList: { [] }
         | ExprList { $1 }

ExprList: Expr { [$1] }
        | ExprList COMMA Expr { $3 :: $1 }  

Vardef: LET IDENTIFIER COLON Type SEMICOLON { Vardef($2, $4, NilStmt) }
      | LET IDENTIFIER COLON Type EQUAL Expr SEMICOLON { Vardef($2, $4, $6) }      
      | LET IDENTIFIER COLON Type EQUAL Expr IN StmtList END { $8 @ [Vardef($2, $4, $6)] }

// Functions

Formal: IDENTIFIER COLON Type { Formal ($1, $3) }

FuncDeclList: NilStmt {}
        | FormalDeclList { $1 }

FormalDeclList: Formal { [$1] }
             | FormalDeclList COMMA Formal { $3 :: $1 }

Funcdef: LET IDENTIFIER LPAREN FuncDeclList RPAREN Type DO StmtList END { Funcdef($2, $4, $6, $8) }


StmtList: {}
        | StmtList Stmt { $2 :: $1  }

NilStmt: {}

Type: STRING {}
    | INT {}
    | FLOAT {}
    | BOOL {}
    | NIL {} 

BoolOp: BANG_EQUAL {}
      | GREATER_EQUAL {}
      | LESS_EQUAL {}
      | EQUAL_EQUAL {}
      | AND {}
      | OR {}
      | LESS {}
      | GREATER {}

BinOp: BoolOp {}
     | STAR {}
     | SLASH {}
     | PLUS {}
     | MINUS {}

UnOp: BANG {}
    | MINUS {}
    | PLUS_PLUS {}
    | MINUS_MINUS {}






