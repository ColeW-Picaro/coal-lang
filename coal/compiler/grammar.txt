enum TokenType {
  // Single-character tokens.
  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,
  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,

  // One or two character tokens.
  BANG, BANG_EQUAL,
  EQUAL, EQUAL_EQUAL,
  GREATER, GREATER_EQUAL,
  LESS, LESS_EQUAL,

  // Literals.
  IDENTIFIER, STRING, NUMBER,

  // Keywords.
  AND, CLASS, ELSE, FALSE, FOR, IF, NIL, OR,
  PRINT, RETURN, SUPER, THIS, TRUE, LET, WHILE,

  EOF
}

Looks like this:

IDENTIFIER: [A-z][0-9]

variables:
let IDENTIFIER : type;
let IDENTIFIER : type = LITERAL;
let IDENTIFIER : type = functionCall();

function:
let IDENTIFIER (param1 : type, param2 : type, ...) : Type do
  ...
end;

control flow:
if (booleanStmt) do
  ...
end;

if (booleanStmt) do
  ...
else do
  ...
end;

if (booleanStmt) do
  ...
elif (booleanStmt) do
  ...
elif (booleanStmt) do
  ...
else do
  ...
end;

for (variableDef; booleanStmt; update) do
  ...
end;

while (booleanStmt) do
  ...
end;

; is added to end for to make oneliners more readable:
if (booleanStmt) do a + b; b + c; a + c; end;

Program:
  [Statement] + EOF

Statement:
  Expression + ";"

Expressions:
  Arithmetic:
    var + var
  Literals:
    "string"
    123
    
Text => Lexer => Token List => Parser => AST

EBNF
